{"version":3,"sources":["configurations.js","App.js","serviceWorker.js","index.js"],"names":["Configurations","document","querySelector","setAttribute","getElementsByClassName","innerHTML","childNodes","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataPrint","imgCut","onDownload","lc","dbtn","getElementById","canvasDraw","setBackClor","dataUrl","toDataURL","canvas","ctx","getContext","globalCompositeOperation","fillStyle","rgb2hex","getStyle","fillRect","width","height","console","log","getAttribute","split","replace","trim","rgb","match","length","parseInt","toString","slice","Seleccionar","self","assertThisInitialized","usesSimpleAPI","name","iconName","didBecomeActive","setState","willBecomeInactive","Copiar","undefined","refs","cropper","getCroppedCanvas","unsubscribeFuncs","on","pt","repaintLayer","image","Image","src","currentShape","LC","createShape","x","y","setShapesInProgress","saveShape","map","f","localize","croper","PaintTools","tools","Pencil","Text","Eyedropper","Eraser","Line","Rectangle","Ellipse","Polygon","SelectShape","react_default","a","createElement","react_cropper_default","ref","alt","autoCrop","style","position","top","zIndex","responsive","guides","background","id","download","type","className","onClick","js_default","LiterallyCanvasReactComponent","imageURLPrefix","backgroundColor","secondaryColor","strokeWidths","var","onInit","Component","Boolean","window","location","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e60ddb30.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Configurations=()=> {\r\n    document.querySelector('[title=\"Pencil\"]').setAttribute(\"title\", \"Lapiz\");\r\n    document.querySelector('[title=\"Text\"]').setAttribute(\"title\", \"Texto\");\r\n    document.querySelector('[title=\"Line\"]').setAttribute(\"title\", \"Linea\");\r\n    document.querySelector('[title=\"Rectangle\"]').setAttribute(\"title\", \"Cuadrado\");\r\n    document.querySelector('[title=\"Eyedropper\"]').setAttribute(\"title\", \"Gotero\");\r\n    document.querySelector('[title=\"Eraser\"]').setAttribute(\"title\", \"Goma\");\r\n    document.querySelector('[title=\"Ellipse\"]').setAttribute(\"title\", \"Circulo\");\r\n    document.querySelector('[title=\"Polygon\"]').setAttribute(\"title\", \"Poligono\");\r\n    // document.querySelector('[title=\"SelectShape\"]').setAttribute(\"title\", \"Seleccionador\");\r\n    \r\n    document.querySelector('[title=\"Undo\"]').setAttribute(\"title\", \"Deshacer\");\r\n    document.querySelector('[title=\"Zoom out\"]').setAttribute(\"title\", \"Alejar\");\r\n    document.querySelector('[title=\"Zoom in\"]').setAttribute(\"title\", \"Acercar\");\r\n    document.getElementsByClassName('lc-clear')[0].innerHTML = \"Limpiar\";\r\n    document.getElementsByClassName('lc-color-pickers')[0].childNodes[0].childNodes[0].innerHTML = \"Borde\";\r\n    document.getElementsByClassName('lc-color-pickers')[0].childNodes[1].childNodes[0].innerHTML = \"Relleno\";\r\n    document.getElementsByClassName('lc-color-pickers')[0].childNodes[2].childNodes[0].innerHTML = \"Fondo\";\r\n}\r\nexport default Configurations;","import React, { Component } from 'react';\r\nimport LC from 'literallycanvas';\r\nimport './css/literallycanvas.css';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport Configurations from './configurations';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    LC.localize('es-MX');\r\n  }\r\n  state = {\r\n    dataPrint: '',\r\n    imgCut:''\r\n  };\r\n  onDownload = (lc) =>{\r\n    const dbtn = document.getElementById('downloadBtn');\r\n    const canvasDraw = document.getElementById('drawingArea');\r\n    this.setBackClor(canvasDraw);\r\n    const dataUrl = canvasDraw.toDataURL('image/jpg');\r\n    dbtn.setAttribute(\"href\", dataUrl);\r\n  }\r\n  setBackClor=(canvas)=>{\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.globalCompositeOperation = 'destination-over';\r\n    ctx.fillStyle = this.rgb2hex(this.getStyle());\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    console.log(this.rgb2hex(this.getStyle()));\r\n  }\r\n  getStyle = () =>{\r\n    const lc_draw = document.getElementsByClassName('lc-drawing')[0];\r\n    let styl = lc_draw.getAttribute('style');\r\n    let bckg = styl.split(':');\r\n    return bckg[1].replace(';', '').trim();\r\n  }\r\n  rgb2hex = (rgb) =>{\r\n    rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\r\n    return (rgb && rgb.length === 4) ? \"#\" +\r\n      (\"0\" + parseInt(rgb[1], 10).toString(16)).slice(-2) +\r\n      (\"0\" + parseInt(rgb[2], 10).toString(16)).slice(-2) +\r\n      (\"0\" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';\r\n  }\r\n  Seleccionar = (lc)=> {\r\n    const self = this;\r\n    return {\r\n      usesSimpleAPI: false,\r\n      name: 'seleccionar',\r\n      iconName: 'select',\r\n      didBecomeActive: function (lc) {\r\n        const canvas = document.getElementById('drawingArea');\r\n        self.setState({\r\n          dataPrint: canvas.toDataURL('image/png')\r\n        });\r\n      },\r\n      willBecomeInactive: function (lc) {self.setState({dataPrint: ''});}\r\n    }\r\n  };\r\n  Copiar = (lc)=> {\r\n    const self = this;\r\n    return {\r\n      usesSimpleAPI: false,\r\n      name: 'Copiar',\r\n      iconName: 'copy',\r\n      didBecomeActive: function (lc) {\r\n        if (self.refs.cropper != undefined){\r\n          console.log(self.refs.cropper.getCroppedCanvas().toDataURL());\r\n          self.setState({\r\n            dataPrint: '',\r\n            imgCut: self.refs.cropper.getCroppedCanvas().toDataURL()\r\n          });\r\n          var onPointerDown = function(pt){\r\n            const image = new Image();\r\n            image.src = self.state.imgCut\r\n            self.currentShape = LC.createShape('Image', {\r\n              x: pt.x,\r\n              y: pt.y,\r\n              image\r\n            });\r\n            lc.setShapesInProgress([self.currentShape]);\r\n            lc.saveShape(self.currentShape);\r\n          }\r\n          var onPointerUp = function (pt) {\r\n            lc.repaintLayer('main');\r\n          };\r\n          self.unsubscribeFuncs = [\r\n            lc.on('lc-pointerup', onPointerUp),\r\n            lc.on('lc-pointerdown', onPointerDown)\r\n          ];\r\n        }\r\n      },\r\n      willBecomeInactive: function (lc) {\r\n        if (self.refs.cropper != undefined) {\r\n          self.unsubscribeFuncs.map(function(f) { f() });\r\n        }\r\n        self.setState({\r\n          dataPrint: '',\r\n          imgCut: ''\r\n        });\r\n      }\r\n    }\r\n  };\r\n  componentDidMount(){\r\n    Configurations();\r\n    const canvasDraw = document.getElementById('drawingArea');\r\n    this.setBackClor(canvasDraw);\r\n  }\r\n  \r\n  render() {\r\n    const PaintTools = [LC.tools.Pencil, \r\n                        LC.tools.Text, \r\n                        LC.tools.Eyedropper, \r\n                        LC.tools.Eraser, \r\n                        LC.tools.Line,\r\n                        LC.tools.Rectangle, \r\n                        LC.tools.Ellipse, \r\n                        LC.tools.Polygon, \r\n                        LC.tools.SelectShape,\r\n                        this.Seleccionar,\r\n                        this.Copiar\r\n                      ];\r\n    let croper;\r\n    if(this.state.dataPrint!==''){\r\n        croper = <Cropper\r\n                  ref='cropper'\r\n                  src = {this.state.dataPrint}\r\n                  alt=\"cropper\"\r\n                  autoCrop={false}\r\n                  style={{height: '100vh', width: '100%', position:\"absolute\",top:32,zIndex:2}}\r\n                  // Cropper.js options\r\n                  responsive={true}\r\n                  guides={true}\r\n                  background={true}/>\r\n        }else{\r\n          croper = ''\r\n        }\r\n    return (\r\n      <div>\r\n        <a id=\"downloadBtn\"  download=\"paint-draw.jpg\">\r\n          <button type=\"button\" className=\"buttons\" onClick={this.onDownload}>Descargar</button>\r\n        </a>\r\n        {croper}\r\n        <LC.LiterallyCanvasReactComponent\r\n        imageURLPrefix = \"/img\" \r\n        backgroundColor = \"#fff\" \r\n        secondaryColor = \"transparent\"\r\n        strokeWidths={[3,5,10]} \r\n        var tools = {PaintTools}\r\n        onInit={function(lc) {\r\n                console.log(\"initialized with\", lc);\r\n                lc.canvas.id=\"drawingArea\"\r\n          }} />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}